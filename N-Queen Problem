N-Queen Problem
Difficulty: HardAccuracy: 35.43%Submissions: 91K+Points: 8
GIVEN PROBLEM STATEMENT
The n-queens puzzle is the problem of placing n queens on a (n×n) chessboard such that no two queens can attack each other.
Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens placement, where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number. For eg below figure represents a chessboard [3 1 4 2].



Examples:

Input: 1
Output: [1]
Explaination: Only one queen can be placed in the single cell available.
Input: 4
Output: [[2 4 1 3 ],[3 1 4 2 ]]
Explaination: These are the 2 possible solutions.
Expected Time Complexity: O(n!)
Expected Auxiliary Space: O(n2) 

Constraints:
1 ≤ n ≤ 10

GIVEN SAMPLE CODE

#User function Template for python3

class Solution:
    def nQueen(self, n):
        # code here


#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        n = int(input())
        
        ob = Solution()
        ans = ob.nQueen(n)
        if(len(ans) == 0):
            print("-1")
        else:
            for i in range(len(ans)):
                print("[",end="")
                for j in range(len(ans[i])):
                    print(ans[i][j],end = " ")
                print("]",end = " ")
            print()
                
# } Driver Code Ends



ACTUAL CODE

class Solution:
    def nQueen(self, n):
        def isSafe(board, row, col):
            # Check this row on left side
            for i in range(col):
                if board[row][i] == 1:
                    return False

            # Check upper diagonal on left side
            for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
                if board[i][j] == 1:
                    return False

            # Check lower diagonal on left side
            for i, j in zip(range(row, n, 1), range(col, -1, -1)):
                if board[i][j] == 1:
                    return False

            return True

        def solveNQUtil(board, col, result):
            if col >= n:
                temp = []
                for i in range(n):
                    for j in range(n):
                        if board[i][j] == 1:
                            temp.append(j+1)
                result.append(temp)
                return

            for i in range(n):
                if isSafe(board, i, col):
                    board[i][col] = 1
                    solveNQUtil(board, col + 1, result)
                    board[i][col] = 0

        result = []
        board = [[0]*n for _ in range(n)]
        solveNQUtil(board, 0, result)
        result.sort()  # Sort the result list
        return result
